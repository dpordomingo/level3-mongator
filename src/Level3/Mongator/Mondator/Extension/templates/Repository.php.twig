<?php
    protected $mongator;

    public function __construct(\Mongator\Mongator $mongator)
    {
        $this->mongator = $mongator;
        $this->documentClass = '{{ class }}';
    }

    public function find(\Level3\Resource\Parameters $attributes, \Level3\Resource\Parameters $filters)
    {
        $documents = $this->getDocuments($filters);
        foreach ($documents as $id => $document) {
            $builder->withEmbedded(
                $this->getRelationsName(), 
                $this->getKey(), 
                $this->createParametersFromDocument($document)
            );
        }

        $resource = $builder->build();
        $resource->repository = $this;

        return $resource;
    }

    protected function getDocumentsFromDatabase(\Level3\Resource\Parameters $filters, Array $criteria)
    {
        $query = $this->getDocumentRepository()->createQuery();
        $this->applyCriteriaToQuery($query, $filters['criteria']);

        list($page, $pageSize) = $this->boundsToPageAndPageSize($filters['range'][0], $filters['range'][1]);

        $chunk = $this->getChunk($filters['sort'], $page, $pageSize);
        $result = $chunk->getResult($query);

        return $result;
    }

    private function applyCriteriaToQuery($query, Array $criteria)
    {
        foreach ($criteria as $key => $value) {
            $value = urldecode($value);
            $this->applyMethodToQuery($query, $key, $value);
        }
    }

    private function applyMethodToQuery($query, $key, $value)
    {
        $method = sprintf('find%s', ucfirst($key));

        if (!method_exists($query, $method)) {
            throw new BadMethodCallException(sprintf('Invalid criteria "%s"', $key));
        }
    
        $query->$method($value);
    }
    
    protected function boundsToPageAndPageSize($lowerBound, $upperBound)
    {
        if ($upperBound == 0) {
            $pageSize = self::MAX_PAGE_SIZE;
        } else {
            $pageSize = min($upperBound - $lowerBound + 1, self::MAX_PAGE_SIZE);
        }

        $page = $lowerBound / $pageSize;
        return array($page, $pageSize);
    }

    protected function getChunk($sort, $page, $pageSize)
    {
        $chunk = new Chunk();
        $chunk->set($sort, $page, $pageSize);
        
        return $chunk;
    }


    public function get(\Level3\Resource\Parameters $attributes)
    {
        $document = $this->getDocument($attributes);
        return $this->getDocumentAsResource($document);
    }

    public function post(\Level3\Resource\Parameters $attributes, Array $data)
    {
        $document = $this->getDocumentRepository()->create();
        $document->fromArray($data);
        $document->save();

        return $this->getDocumentAsResource($document);
    }

    public function put(\Level3\Resource\Parameters $attributes, Array $data)
    {
        $orignalDocument = $this->getDocument($attributes);
        $data['id'] = $orignalDocument->getId();

        $document = $this->getDocumentRepository()->create();
        $document->fromArray($data);
        $document->setIsNew(false);
        $document->save();

        return $this->getDocumentAsResource($document);
    }

    public function patch(\Level3\Resource\Parameters $attributes, Array $data)
    {
        $document = $this->getDocument($attributes);
        unset($data['id']);
        
        $document->fromArray($data);
        $document->save();    

        return $this->getDocumentAsResource($document);
    }

    public function delete(\Level3\Resource\Parameters $attributes)
    {
        $document = $this->getDocument($parameters);
        $this->getDocumentRepository()->delete($document);
    }

    protected function getDocument(Parameters $parameters)
    {
        $id = $this->castStringToMongoId($parameters->get('id'));

        $result = $this->getDocumentRepository()->findById([$id]);
        if ($result) {
            return end($result);
        } else {
            throw new \Level3\Exceptions\NotFound();
        }
    }

    protected function getDocumentRepository()
    {
        return $this->mongator->getRepository('{{ class }}');
    }

    protected function castStringToMongoId($id)
    {
        $valid = false;

        try {
            $mongoId = new \MongoId($id);
            if ((string) $mongoId == $id) {
                $valid = true;
            }
        } catch (\MongoException $e) {
            
        }
        
        if (!$valid) {
            throw new \Level3\Exceptions\BadRequest();
        }

        return $mongoId;
    }
