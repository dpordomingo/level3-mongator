<?php
    protected $document;
    protected $level3;

    public function __construct(\Level3\Level3 $level3)
    {
        $this->level3 = $level3;
    }

    static public function formatToDocument(Array $data)
    {
{# fields #}
{% if extension.isRepositoryNeeded(class) %}
        if (isset($data['id'])) {
            $string = (string) $data['id'];

            try {
                $data['id'] = $object = {{ extension.getTypeFromResponse('MongoId') }};
            } catch (\Exception $e) {
                throw new \Level3\Exceptions\BadRequest();
            }

            if (!$object || $string != {{ extension.getTypeToResponse('MongoId') }}) {
                throw new \Level3\Exceptions\BadRequest();
            }
        }
       
{% endif %}
{% for name, config in config_class.fields %}
{% if 'referenceField' not in config|keys %}
{% if extension.hasType(config.type) %}
        if (isset($data['{{ name }}'])) {
            $string = $data['{{ name }}'];
            try {
                $data['{{ name }}'] = $object = {{ extension.getTypeFromResponse(config.type) }};
            } catch (\Exception $e) {
                throw new \Level3\Exceptions\BadRequest();
            }

            if (!$object || $string != {{ extension.getTypeToResponse(config.type) }}) {
                throw new \Level3\Exceptions\BadRequest();
            }
        }

{% endif %}
{% endif %}
{% endfor %}
{# embeddedsOne #}
{% for name, config in config_class.embeddedsOne %}
        if (isset($data['{{ name }}'])) {
            if (!is_array($data['{{ name }}'])) {
                throw new \Level3\Exceptions\BadRequest();
            }

            $data['{{ name }}'] = \{{ extension.getResourceClassName(config.class) }}::formatToDocument($data['{{ name }}']);
        }

{% endfor %}
{# embeddedsMany #}
{% for name, config in config_class.embeddedsMany %}
        if (isset($data['{{ name }}'])) {
            if (!is_array($data['{{ name }}'])) {
                throw new \Level3\Exceptions\BadRequest();
            }

            $count = count($data['{{ name }}']);
            for ($i=0;$i < $count ;$i++) { 
                if (!is_array($data['{{ name }}'][$i])) {
                    throw new \Level3\Exceptions\BadRequest();
                }
                
                $data['{{ name }}'][$i] = \{{ extension.getResourceClassName(config.class) }}::formatToDocument($data['{{ name }}'][$i]);
            }
        }

{% endfor %}
{# referencesOne #}
{% for name, config in config_class.referencesOne %}
        if (isset($data['{{ name }}'])) {
            $string = (string) $data['{{ name }}'];
            unset($data['{{ name }}']);

            try {
                $data['{{ name }}_reference_field'] = $object = {{ extension.getTypeFromResponse('MongoId') }};
            } catch (\Exception $e) {
                throw new \Level3\Exceptions\BadRequest();
            }

            if (!$object || $string != {{ extension.getTypeToResponse('MongoId') }}) {
                throw new \Level3\Exceptions\BadRequest();
            }
        }

{% endfor %}
{# referencesMany #}
{% for name, config in config_class.referencesMany %}
        if (isset($data['{{ name }}'])) {
            if (!is_array($data['{{ name }}'])) {
                throw new \Level3\Exceptions\BadRequest();
            }

            $count = count($data['{{ name }}']);
            for ($i=0;$i < $count ;$i++) { 
                $string = (string) $data['{{ name }}'][$i];

                try {
                    $data['{{ name }}_reference_field'][$i] = $object = {{ extension.getTypeFromResponse('MongoId') }};
                } catch (\Exception $e) {
                    throw new \Level3\Exceptions\BadRequest();
                }

                if (!$object || $string != {{ extension.getTypeToResponse('MongoId') }}) {
                    throw new \Level3\Exceptions\BadRequest();
                }
            }

            unset($data['{{ name }}']);
        }

{% endfor %}
        
        return $data;
    }

    public function fromDocument(\{{ class }} $document)
    {
        $this->setDataFromDocument($document);
        $this->setResourcesFromDocument($document);
        $this->setLinksFromDocument($document);
    }

    public function fromDocuments(\Level3\Repository $repository, Array $documents)
    {
        foreach ($documents as $document) {
            $resource = $repository->createDocumentResource($document);  
            $this->addResource('resources', $resource);
        }
    }

    protected function setDataFromDocument(\{{ class }} $document)
    {
        $data = array();

{# fields #}
{% if extension.isRepositoryNeeded(class) %}
        $object = $document->getId();
        $data['id'] = {{ extension.getTypeToResponse('MongoId') }};

{% endif %}
{% for name, config in config_class.fields %}
{% if 'referenceField' not in config|keys %}
{% if extension.hasType(config.type) %}

        $data['{{ name }}'] = $object = $document->get{{name|ucfirst}}();
        if ($object) {
            $data['{{ name }}'] = {{ extension.getTypeToResponse(config.type) }};
        }

{% else %}
        $data['{{ name }}'] = $document->get{{name|ucfirst}}();
{% endif %}
{% endif %}
{% endfor %}

        $this->setData($data);
    }
    
    protected function setResourcesFromDocument(\{{ class }} $document)
    {
{# embeddedsOne #}
{% for name, config in config_class.embeddedsOne %}
        if (${{ name }} = $document->get{{ name|ucfirst }}()) {
            $this->addResource('{{ name }}', $this->create{{ name|ucfirst }}EmbeddedResource(${{ name }}));
        }

{% endfor %}
{# embeddedsMany #}
{% for name, config in config_class.embeddedsMany %}
        foreach($document->get{{ name|ucfirst }}() as $embedded) {
            $this->addResource('{{ name }}', $this->create{{ name|ucfirst }}EmbeddedResource($embedded));
        }

{% endfor %}
    }

    protected function setLinksFromDocument(\{{ class }} $document)
    {
{# referencesOne #}
{% for name, config in config_class.referencesOne %}
        $referenced = $document->get{{ name|ucfirst }}();
        if ($referenced) {
            $uri = $this->getRepository('{{ extension.getRepositoryKey(config.class) }}')->getDocumentURI($referenced);
            $link = new \Level3\Resource\Link($uri);
            $this->addLink('{{ name }}', $link);
        }

{% endfor %}
{# referencesMany #}
{% for name, config in config_class.referencesMany %}
        $repository = $this->getRepository('{{ extension.getRepositoryKey(config.class) }}');
        foreach ($document->get{{ name|ucfirst }}() as $referenced) {
            $uri = $repository->getDocumentURI($referenced);
            $link = new \Level3\Resource\Link($uri);
            $this->addLink('{{ name }}', $link);
        }

{% endfor %}
    }

    protected function getRepository($repositoryKey)
    {
        return $this->level3->getHub()->get($repositoryKey);
    }

    public function fromRequest(Array $data)
    {
{% for name in config_class.fields|keys %}
{% if config_class.fields[name].type  == 'date' %}
        if (isset($data['{{ name }}'])) {
            $data['{{ name }}'] = $this->types->fromRequest('DateTime', $data['{{ name }}']);
        }
{% endif %}
{% endfor %}

{# referencesOne #}
{% for name in config_class.referencesOne|keys %}
        if (isset($data['{{ name }}'])) {
            $data['{{ name }}_reference_field'] = $this->types->fromRequest('MongoId', $data['{{ name }}']);
            unset($data['{{ name }}']);
        }
{% endfor %}

        return $data;
    }

{% set embeddeds = config_class.embeddedsOne|merge(config_class.embeddedsMany) %}
{% for name, config in embeddeds %}
    protected function create{{ name|ucfirst }}EmbeddedResource(\{{ config.class }} $document)
    {
{% if extension.isRepositoryNeeded(config.class) %}
        $repository = $this->level3->getHub()->get('{{ extension.getRepositoryKey(class, name)}}');
        $resource = $repository->createDocumentResource($document);
{% else %}
        $resource = new \{{ extension.getResourceClassName(config.class) }}($this->level3);
        $resource->fromDocument($document);
{% endif %}

        return $resource;
    }

{% endfor %}